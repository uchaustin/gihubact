---
Resources:
  CWEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      State: ENABLED
      Targets:
        - Arn: !GetAtt KinesisFirehoseDeliveryStream.Arn
          RoleArn: !Ref EventbridgeFirehoseTriggerRole
          Id: FirehoseTaskScheduler
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Imported

  EventbridgeFirehoseTriggerRole:
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        - PolicyName: EventbridgeTriggerforFirehose
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "firehose:PutRecord"
                  - "firehose:PutRecordBatch"
                Resource: !GetAtt KinesisFirehoseDeliveryStream.Arn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: "sts:AssumeRole"

  KinesisFirehoseDeliveryStream:
    DependsOn:
      - FirehoseDeliveryPolicy
      - BucketForLambda
    Type: "AWS::KinesisFirehose::DeliveryStream"
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join
          - ""
          - - "arn:aws:s3:::"
            - !Ref BucketForLambda
        Prefix: "firehose-test/"
        BufferingHints:
          IntervalInSeconds: "900"
          SizeInMBs: "128"
        CompressionFormat: UNCOMPRESSED
        RoleARN: !GetAtt FirehoseDeliveryRole.Arn

  FirehoseDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: "sts:AssumeRole"


  FirehoseDeliveryPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "s3:AbortMultipartUpload"
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:PutObject"
            Resource:
              - !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref BucketForLambda
              - !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref BucketForLambda
                  - "*"
      Roles:
        - !Ref FirehoseDeliveryRole

  BucketForLambda:
    Type: "AWS::S3::Bucket"
    DependsOn:
      - BucketPermission
      - TransformFindingsLambda
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt TransformFindingsLambda.Arn
            Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: raw/firehose/
      LifecycleConfiguration:
        Rules:
          - Id: DeleteRawFiles
            Prefix: /raw/
            Status: Enabled
            ExpirationInDays: "5"

  BucketPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref TransformFindingsLambda
      Principal: s3.amazonaws.com

  TransformFindingsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          from assets.lambdas.transform_findings.index import TransformFindings
          import boto3
          from moto import mock_s3


          def __make_bucket(bucket_name: str):
            bucket = boto3.resource('s3').Bucket(bucket_name)
            bucket.create()
            return bucket


          @mock_s3
          def test_fix_dictionary():
            bucket = __make_bucket('tester')
            transform_findings = TransformFindings(bucket.name)

            finding = {
              'first/level/test': 'test',
              'ProductArn': 'arn:aws:securityhub:us-east-1::product/aws/securityhub',
              'Types': ['Software and Configuration Checks/Industry and Regulatory Standards/CIS AWS Foundations Benchmark'],
              'Description': 'Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to port 22.',
              'SchemaVersion': '2018-10-08',
              'Compliance': {'Status': 'PASSED'},
              'GeneratorId': 'arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0/rule/4.1',
              'FirstObservedAt': '2021-01-31T04:52:30.123Z',
              'CreatedAt': '2021-01-31T04:52:30.123Z',
              'RecordState': 'ACTIVE',
              'Title': '4.1 Ensure no security groups allow ingress from 0.0.0.0/0 to port 22',
              'Workflow': {'Status': 'RESOLVED'},
              'LastObservedAt': '2021-05-07T11:05:27.353Z',
              'Severity': {'Normalized': 0, 'Label': 'INFORMATIONAL', 'Product': 0, 'Original': 'INFORMATIONAL'},
              'UpdatedAt': '2021-05-07T11:05:25.775Z',
              'FindingProviderFields': {
                  'Types': [
                      'Software and Configuration Checks/Industry and Regulatory Standards/CIS AWS Foundations Benchmark'],
                  'Severity': {'Normalized': 0, 'Label': 'INFORMATIONAL', 'Product': 0, 'Original': 'INFORMATIONAL'}
              },
              'WorkflowState': 'NEW',
              'ProductFields': {
                'StandardsGuideArn': 'arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0',
                'StandardsGuideSubscriptionArn': 'arn:aws:securityhub:us-east-1:0123456789:subscription/cis-aws-foundations-benchmark/v/1.2.0',
                'RuleId': '4.1',
                'RecommendationUrl': 'https://docs.aws.amazon.com/console/securityhub/standards-cis-4.1/remediation',
                'RelatedAWSResources:0/name': 'securityhub-restricted-ssh-38a80c22',
                'RelatedAWSResources:0/type': 'AWS::Config::ConfigRule',
                'StandardsControlArn': 'arn:aws:securityhub:us-east-1:0123456789:control/cis-aws-foundations-benchmark/v/1.2.0/4.1',
                'aws/securityhub/ProductName': 'Security Hub',
                'aws/securityhub/CompanyName': 'AWS',
                'aws/securityhub/FindingId': 'arn:aws:securityhub:us-east-1::product/aws/securityhub/arn:aws:securityhub:us-east-1:0123456789:subscription/cis-aws-foundations-benchmark/v/1.2.0/4.1/finding/2a55570b-74e9-4aa3-9f4e-66f515c7ff03'
              },
              'AwsAccountId': '0123456789',
              'Id': 'arn:aws:securityhub:us-east-1:0123456789:subscription/cis-aws-foundations-benchmark/v/1.2.0/4.1/finding/2a55570b-74e9-4aa3-9f4e-66f515c7ff03',
              'Remediation': {
                'Recommendation': {
                  'Text': 'For directions on how to fix this issue, please consult the AWS Security Hub CIS documentation.',
                  'Url': 'https://docs.aws.amazon.com/console/securityhub/standards-cis-4.1/remediation'}
              },
              'Resources': [{
                'Partition': 'aws',
                'Type': 'AwsEc2SecurityGroup',
                'Details': {
                  'AwsEc2SecurityGroup': {
                    'GroupName': 'default',
                    'OwnerId': '0123456789',
                    'VpcId': 'vpc-0123456789',
                    'IpPermissions': [{'IpProtocol': '-1', 'UserIdGroupPairs': [
                      {'UserId': '0123456789', 'GroupId': 'sg-0123456789'}]}],
                    'IpPermissionsEgress': [{'IpProtocol': '-1', 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}],
                    'GroupId': 'sg-0123456789'}
                },
                'Region': 'us-east-1', 'Id': 'arn:aws:ec2:us-east-1:0123456789:security-group/sg-0123456789'
              }]
            }
            result = transform_findings.fix_dictionary(finding)

            assert isinstance(result, dict)
            assert 'first/level/test' not in result
            assert 'first_level_test' in result
            assert 'ProductFields' in result
            assert 'aws/securityhub/ProductName' not in result['ProductFields']
            assert 'aws_securityhub_ProductName' in result['ProductFields']
            assert 'aws/securityhub/CompanyName' not in result['ProductFields']
            assert 'aws_securityhub_CompanyName' in result['ProductFields']
            assert 'aws/securityhub/FindingId' not in result['ProductFields']
            assert 'aws_securityhub_FindingId' in result['ProductFields']
            assert 'RelatedAWSResources:0/name' not in result['ProductFields']
            assert 'RelatedAWSResources_0_name' in result['ProductFields']

      Handler: index.handler
      Runtime: python3.7
      Description: Function sorts findings by AWS account id/product/region
      MemorySize: 128
      Timeout: 300
      Role:
        "Fn::GetAtt":
          - LambdaTransformRole
          - Arn

  LambdaTransformRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"

  GlueDatabase:
    Type: "AWS::Glue::Database"
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: "Security Hub Findings Catalog"
        Name: "Security Hub Findings Catalog"

  UsageTable:
    DependsOn:
      - GlueDatabase
    Type: "AWS::Glue::Table"
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: smart_hub_data_json
        Description: Smart Hub electrical usage (JSON)
        TableType: EXTERNAL_TABLE
        Parameters: { "classification": "json", "compressionType": "none" }
        PartitionKeys:
          - Name: dt
            Type: date
        StorageDescriptor:
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Columns:
            - Name: loc_id
              Type: string
            - Name: ts
              Type: bigint
            - Name: data
              Type: struct<s_01:double,s_02:double,s_03:double,s_04:double,s_05:double,s_06:double,s_07:double,s_08:double,s_09:double,s_10:double>
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location:
            !Join ["", ["s3://", !Ref "BucketForLambda", "raw/firehose/"]]
          SerdeInfo:
            Parameters:
              field.delim: ","
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

  MappingsTable:
    DependsOn:
      - GlueDatabase
    Type: "AWS::Glue::Table"
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: sensor_mappings_json
        Description: Smart Hub sensor mappings (JSON)
        TableType: EXTERNAL_TABLE
        Parameters: { "classification": "json", "compressionType": "none" }
        PartitionKeys:
          - Name: state
            Type: string
        StorageDescriptor:
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Columns:
            - Name: loc_id
              Type: string
            - Name: id
              Type: string
            - Name: description
              Type: string
            - Name: location
              Type: string
            - Name: watts
              Type: int
            - Name: last_modified
              Type: int
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location:
            !Join ["", ["s3://", !Ref "BucketForLambda", "raw/firehose/"]]
          SerdeInfo:
            Parameters:
              field.delim: ","
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

  LocationsTable:
    DependsOn:
      - GlueDatabase
    Type: "AWS::Glue::Table"
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: smart_hub_locations_csv
        Description: Smart Hub locations (CSV)
        TableType: EXTERNAL_TABLE
        Parameters:
          {
            "classification": "csv",
            "compressionType": "none",
            "skip.header.line.count": "1",
          }
        PartitionKeys:
          - Name: state
            Type: string
        StorageDescriptor:
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Columns:
            - Name: lon
              Type: double
            - Name: lat
              Type: double
            - Name: number
              Type: string
            - Name: street
              Type: string
            - Name: unit
              Type: string
            - Name: city
              Type: string
            - Name: district
              Type: string
            - Name: region
              Type: string
            - Name: postcode
              Type: int
            - Name: id
              Type: string
            - Name: hash
              Type: string
            - Name: tz
              Type: string
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location:
            !Join ["", ["s3://", !Ref "BucketForLambda", "raw/firehose/"]]
          SerdeInfo:
            Parameters:
              field.delim: ","
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  CrawlerLocations:
    Type: "AWS::Glue::Crawler"
    Properties:
      Name: smart-hub-locations-csv
      Role: !GetAtt "CrawlerRole.Arn"
      Targets:
        CatalogTargets:
          - DatabaseName: !Ref GlueDatabase
            Tables:
              - !Ref LocationsTable
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Configuration: '{"Version":1.0,"CrawlerOutput":{"Partitions":{"AddOrUpdateBehavior":"InheritFromTable"},"Tables":{"AddOrUpdateBehavior":"MergeNewColumns"}}}'
    DependsOn:
      - CrawlerRole
      - GlueDatabase
      - DataBucket (ENTER THE NAME OF THE BUCKET THAT LAMBDA FUNCTION IS CREATES)

  CrawlerMappings:
    Type: "AWS::Glue::Crawler"
    Properties:
      Name: smart-hub-sensor-mappings-json
      Role: !GetAtt "CrawlerRole.Arn"
      Targets:
        CatalogTargets:
          - DatabaseName: !Ref GlueDatabase
            Tables:
              - !Ref MappingsTable
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Configuration: '{"Version":1.0,"CrawlerOutput":{"Partitions":{"AddOrUpdateBehavior":"InheritFromTable"},"Tables":{"AddOrUpdateBehavior":"MergeNewColumns"}}}'
    DependsOn:
      - CrawlerRole
      - GlueDatabase
      - DataBucket (ENTER THE NAME OF THE BUCKET THAT LAMBDA FUNCTION IS CREATES)

  CrawlerRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: SmartHubCrawlerRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: DemoCrawlerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: "*"
